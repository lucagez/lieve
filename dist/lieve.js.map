{"version":3,"file":"lieve.js","sources":["../src/utils.mjs","../src/lieve.mjs"],"sourcesContent":["const _bodyParser = (req, type) => {\n  return new Promise(resolve => {\n    const chunks = [];\n    req.on('data', chunk => chunks.push(chunk))\n    req.on('end', () => {\n      const body = Buffer.concat(chunks).toString();\n      switch (type) {\n        case 'x-www-form-urlencoded':\n          const parsed = {};\n          body.split('&').map(e => {\n            const [prop, value] = e.split('=');\n            parsed[prop] = value;\n          });\n          resolve(parsed);\n          break;\n        case 'binary':\n          resolve({ file: body });\n          break;\n        default:\n          resolve(body);\n      }\n    });\n  });\n};\n\nconst _cookieParser = req => {\n  const { cookie } = req.headers;\n  if (!cookie) return {};\n  const basket = {};\n  cookie.split(';').forEach(e => {\n    const [prop, value] = e.split('=').map(e => e.trim());\n    basket[prop] = value;\n  });\n  return basket;\n};\n\nconst _queryParser = (req, delimiter = '&') => {\n  const { url } = req;\n  const query = {};\n  url.match(/[^?]+$/)[0].split(delimiter).map(e => {\n    const [prop, value] = e.split('=');\n    query[prop] = value;\n  });\n  return query;\n}; \n\nconst _list = (routes) => {\n  const pieces = Object.keys(routes)\n    .map(e => e.split('/').slice(1))\n    .flat()\n    .filter(e => e !== ':par');\n\n  return Array.from(new Set(pieces))//.join();\n};\n\nconst _set = (req, prop, value, writable = false) => {\n  Object.defineProperty(req, prop, {\n    value,\n    writable,\n  });\n};\n\nfunction _send(content, type = 'text/plain', status = 200) {\n  this.writeHead(status, { 'Content-Type': type });\n  this.end(content);\n};\n\nfunction _next() {\n  this.index += 1;\n  return this.queue[this.index];\n};\n\nexport {\n  _bodyParser,\n  _cookieParser,\n  _queryParser,\n  _send,\n  _set,\n  _next,\n  _list,\n};\n","import { _send, _next, _list } from './utils';\n\nexport class Lieve {\n  constructor(routes) {\n    this.routes = routes;\n    // before/after every request\n    this.before = routes.before || [];\n    this.after = routes.after || [];\n    this.list = _list(routes);\n    this.matchPar = new RegExp(/[^\\/]+$/);\n    this.matchUrl = new RegExp(/\\/$|\\?(.*)/);\n\n    this.find = this.find.bind(this);\n    this.router = this.router.bind(this);\n  };\n\n  find(url) {\n    // Super-fast mode finds only last :par\n    if (url === '/') return { path: url, par: undefined };\n    const use = url.replace(this.matchUrl, '');\n\n    const par = use.match(this.matchPar)[0];\n    const path = this.list.indexOf(par) > -1\n      ? use\n      : use.replace(par, ':par');\n\n    // Using the following algo you can find multiple params inside an url\n    // NOTE: the following only works if `this.list` is an array => modify `_list` function\n    // const path = '/' + url\n    //   .replace(/\\/$/g, '')\n    //   .split('/').slice(1)\n    //   .map(e => this.list.indexOf(e) > -1\n    //     ? e\n    //     : (() => {\n    //       par.push(e);\n    //       return ':par';\n    //     })())\n    //   .join('/');\n\n    return { path, par };\n  };\n\n  router(req, res) {\n    res.send = _send;\n    const { url, method } = req;\n    const { path, par } = this.find(url);\n\n    const route = this.routes[path] || {};\n    \n    // before/after route handler\n    const { before = [], after = [] } = route;\n    const handler = route[method];\n    if (!handler) {\n      res.send(JSON.stringify({\n          error: 'Not Found',\n          status: 404,\n        }), 'application/json', 404);\n      return;\n    };\n\n    const queue = [...this.before, ...before, handler, ...after, ...this.after];\n\n    req.par = par;\n    req.queue = queue;\n    req.index = 0;\n    req.next = _next.bind(req);\n\n    queue[0](req, res);\n  };\n};\n\nexport { _bodyParser, _cookieParser, _queryParser, _set } from './utils';\n"],"names":["_send","content","type","status","writeHead","end","Lieve","constructor","routes","before","after","list","pieces","Object","keys","map","e","split","slice","flat","filter","Array","from","Set","_list","matchPar","RegExp","matchUrl","find","this","bind","router","url","undefined","use","replace","par","match","indexOf","req","res","send","route","handler","method","queue","index","next","JSON","stringify","Promise","resolve","chunks","on","chunk","push","body","Buffer","concat","toString","parsed","file","headers","cookie","basket","forEach","trim","delimiter","query","prop","value","writable","defineProperty"],"mappings":"AA8DA,SAASA,EAAMC,EAASC,EAAqBC,kBAAd,6BAAuB,UAC/CC,UAAUD,EAAQ,gBAAkBD,SACpCG,IAAIJ,OC9DEK,EACXC,SAAYC,QACLA,OAASA,OAETC,OAASD,EAAOC,QAAU,QAC1BC,MAAQF,EAAOE,OAAS,QACxBC,cDsCMH,OACPI,EAASC,OAAOC,KAAKN,GACxBO,aAAIC,UAAKA,EAAEC,MAAM,KAAKC,MAAM,KAC5BC,OACAC,gBAAOJ,SAAW,SAANA,WAERK,MAAMC,KAAK,IAAIC,IAAIX,IC5CZY,CAAMhB,QACbiB,SAAW,IAAIC,OAAO,gBACtBC,SAAW,IAAID,OAAO,mBAEtBE,KAAOC,KAAKD,KAAKE,KAAKD,WACtBE,OAASF,KAAKE,OAAOD,KAAKD,OAGjCD,YAAAA,cAAKI,MAES,MAARA,EAAa,MAAO,MAAQA,WAAUC,OACpCC,EAAMF,EAAIG,QAAQN,KAAKF,SAAU,IAEjCS,EAAMF,EAAIG,MAAMR,KAAKJ,UAAU,SAkB9B,MAjBMI,KAAKlB,KAAK2B,QAAQF,IAAQ,EACnCF,EACAA,EAAIC,QAAQC,EAAK,YAeNA,IAGjBL,YAAAA,gBAAOQ,EAAKC,GACVA,EAAIC,KAAOzC,mBAEW6B,KAAKD,oBAErBc,EAAQb,KAAKrB,gBAAgB,6BAGlB,iCAAY,QACvBmC,EAAUD,EAAME,MACjBD,OAQCE,EAAYhB,mBAAgBpB,GAAQkC,GAASjC,EAAUmB,KAAQnB,OAErE6B,EAAIH,IAAMA,EACVG,EAAIM,MAAQA,EACZN,EAAIO,MAAQ,IACRC,KDER,uBACOD,OAAS,EACPjB,KAAKgB,MAAMhB,KAAKiB,QCJJhB,KAAKS,KAEhB,GAAGA,EAAKC,QAdZA,EAAIC,KAAKO,KAAKC,UAAU,OACb,mBACC,MACN,mBAAoB,mDDxDXV,EAAKrC,UACjB,IAAIgD,iBAAQC,OACXC,EAAS,GACfb,EAAIc,GAAG,gBAAQC,UAASF,EAAOG,KAAKD,KACpCf,EAAIc,GAAG,qBACCG,EAAOC,OAAOC,OAAON,GAAQO,kBAC3BzD,OACD,4BACG0D,EAAS,GACfJ,EAAKvC,MAAM,KAAKF,aAAIC,SACIA,EAAEC,MAAM,KAC9B2C,eAEFT,EAAQS,aAEL,SACHT,EAAQ,CAAEU,KAAML,kBAGhBL,EAAQK,wCAMIjB,SACDA,EAAIuB,mBAClBC,EAAQ,MAAO,OACdC,EAAS,UACfD,EAAO9C,MAAM,KAAKgD,iBAAQjD,SACFA,EAAEC,MAAM,KAAKF,aAAIC,UAAKA,EAAEkD,SAC9CF,eAEKA,iCAGazB,EAAK4B,kBAAY,KAC7BnC,IACFoC,EAAQ,gBACV/B,MAAM,UAAU,GAAGpB,MAAMkD,GAAWpD,aAAIC,SACpBA,EAAEC,MAAM,KAC9BmD,eAEKA,yBAYK7B,EAAK8B,EAAMC,EAAOC,mBAAW,GACzC1D,OAAO2D,eAAejC,EAAK8B,EAAM,OAC/BC,WACAC"}