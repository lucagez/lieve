{"version":3,"file":"lieve.mjs","sources":["../src/utils.mjs","../src/lieve.mjs"],"sourcesContent":["const _bodyParser = (req, type) => {\n  return new Promise(resolve => {\n    const chunks = [];\n    req.on('data', chunk => chunks.push(chunk))\n    req.on('end', () => {\n      const body = Buffer.concat(chunks).toString();\n      switch (type) {\n        case 'x-www-form-urlencoded':\n          const parsed = {};\n          body.split('&').map(e => {\n            const [prop, value] = e.split('=');\n            parsed[prop] = value;\n          });\n          resolve(parsed);\n          break;\n        case 'binary':\n          resolve({ file: body });\n          break;\n        default:\n          resolve(body);\n      }\n    });\n  });\n};\n\nconst _cookieParser = req => {\n  const { cookie } = req.headers;\n  if (!cookie) return {};\n  const basket = {};\n  cookie.split(';').forEach(e => {\n    const [prop, value] = e.split('=').map(e => e.trim());\n    basket[prop] = value;\n  });\n  return basket;\n};\n\nconst _queryParser = (req, delimiter = '&') => {\n  const { url } = req;\n  const query = {};\n  url.match(/[^?]+$/)[0].split(delimiter).map(e => {\n    const [prop, value] = e.split('=');\n    query[prop] = value;\n  });\n  return query;\n}; \n\nconst _list = (routes) => {\n  const pieces = Object.keys(routes)\n    .map(e => e.split('/').slice(1))\n    .flat()\n    .filter(e => e !== ':par');\n\n  return Array.from(new Set(pieces))//.join();\n};\n\nconst _set = (req, prop, value, writable = false) => {\n  Object.defineProperty(req, prop, {\n    value,\n    writable,\n  });\n};\n\nfunction _send(content, type = 'text/plain', status = 200) {\n  this.writeHead(status, { 'Content-Type': type });\n  this.end(content);\n};\n\nfunction _next() {\n  this.index += 1;\n  return this.queue[this.index];\n};\n\nexport {\n  _bodyParser,\n  _cookieParser,\n  _queryParser,\n  _send,\n  _set,\n  _next,\n  _list,\n};\n","import { _send, _next, _list } from './utils';\n\nexport class Lieve {\n  constructor(routes) {\n    this.routes = routes;\n    // before/after every request\n    this.before = routes.before || [];\n    this.after = routes.after || [];\n    this.list = _list(routes);\n    this.matchPar = new RegExp(/[^\\/]+$/);\n    this.matchUrl = new RegExp(/\\/$|\\?(.*)/);\n\n    this.find = this.find.bind(this);\n    this.router = this.router.bind(this);\n  };\n\n  find(url) {\n    // Super-fast mode finds only last :par\n    const use = url.replace(this.matchUrl, '');\n    const par = use.match(this.matchPar)[0];\n    const path = this.list.indexOf(par) > -1\n      ? use\n      : use.replace(par, ':par');\n\n    // Using the following algo you can find multiple params inside an url\n    // NOTE: the following only works if `this.list` is an array => modify `_list` function\n    // const path = '/' + url\n    //   .replace(/\\/$/g, '')\n    //   .split('/').slice(1)\n    //   .map(e => this.list.indexOf(e) > -1\n    //     ? e\n    //     : (() => {\n    //       par.push(e);\n    //       return ':par';\n    //     })())\n    //   .join('/');\n\n    return { path, par };\n  };\n\n  router(req, res) {\n    res.send = _send;\n    const { url, method } = req;\n    const { path, par } = this.find(url);\n\n    const route = this.routes[path] || {};\n    \n    // before/after route handler\n    const { before = [], after = [] } = route;\n    const handler = route[method];\n    if (!handler) {\n      res.send(JSON.stringify({\n          error: 'Not Found',\n          status: 404,\n        }), 'application/json', 404);\n      return;\n    };\n\n    const queue = [...this.before, ...before, handler, ...after, ...this.after];\n\n    req.par = par;\n    req.queue = queue;\n    req.index = 0;\n    req.next = _next.bind(req);\n\n    queue[0](req, res);\n  };\n};\n\nexport { _bodyParser, _cookieParser, _queryParser, _set } from './utils';\n"],"names":["_bodyParser","req","type","Promise","resolve","chunks","on","chunk","push","body","Buffer","concat","toString","parsed","split","map","e","file","_cookieParser","headers","cookie","basket","forEach","trim","_queryParser","delimiter","url","query","match","_set","prop","value","writable","Object","defineProperty","_send","content","status","writeHead","end","Lieve","constructor","routes","before","after","list","pieces","keys","slice","flat","filter","Array","from","Set","_list","matchPar","RegExp","matchUrl","find","this","bind","router","use","replace","par","indexOf","res","send","route","handler","method","queue","index","next","JSON","stringify"],"mappings":"IAAMA,WAAeC,EAAKC,UACjB,IAAIC,iBAAQC,OACXC,EAAS,GACfJ,EAAIK,GAAG,gBAAQC,UAASF,EAAOG,KAAKD,KACpCN,EAAIK,GAAG,qBACCG,EAAOC,OAAOC,OAAON,GAAQO,kBAC3BV,OACD,4BACGW,EAAS,GACfJ,EAAKK,MAAM,KAAKC,aAAIC,SACIA,EAAEF,MAAM,KAC9BD,eAEFT,EAAQS,aAEL,SACHT,EAAQ,CAAEa,KAAMR,kBAGhBL,EAAQK,SAMZS,WAAgBjB,SACDA,EAAIkB,mBAClBC,EAAQ,MAAO,OACdC,EAAS,UACfD,EAAON,MAAM,KAAKQ,iBAAQN,SACFA,EAAEF,MAAM,KAAKC,aAAIC,UAAKA,EAAEO,SAC9CF,eAEKA,GAGHG,WAAgBvB,EAAKwB,kBAAY,KAC7BC,IACFC,EAAQ,gBACVC,MAAM,UAAU,GAAGd,MAAMW,GAAWV,aAAIC,SACpBA,EAAEF,MAAM,KAC9Ba,eAEKA,GAYHE,WAAQ5B,EAAK6B,EAAMC,EAAOC,mBAAW,GACzCC,OAAOC,eAAejC,EAAK6B,EAAM,OAC/BC,WACAC,KAIJ,SAASG,EAAMC,EAASlC,EAAqBmC,kBAAd,6BAAuB,UAC/CC,UAAUD,EAAQ,gBAAkBnC,SACpCqC,IAAIH,OC9DEI,EACXC,SAAYC,QACLA,OAASA,OAETC,OAASD,EAAOC,QAAU,QAC1BC,MAAQF,EAAOE,OAAS,QACxBC,cDsCMH,OACPI,EAASb,OAAOc,KAAKL,GACxB3B,aAAIC,UAAKA,EAAEF,MAAM,KAAKkC,MAAM,KAC5BC,OACAC,gBAAOlC,SAAW,SAANA,WAERmC,MAAMC,KAAK,IAAIC,IAAIP,IC5CZQ,CAAMZ,QACba,SAAW,IAAIC,OAAO,gBACtBC,SAAW,IAAID,OAAO,mBAEtBE,KAAOC,KAAKD,KAAKE,KAAKD,WACtBE,OAASF,KAAKE,OAAOD,KAAKD,OAGjCD,YAAAA,cAAKhC,OAEGoC,EAAMpC,EAAIqC,QAAQJ,KAAKF,SAAU,IACjCO,EAAMF,EAAIlC,MAAM+B,KAAKJ,UAAU,SAkB9B,MAjBMI,KAAKd,KAAKoB,QAAQD,IAAQ,EACnCF,EACAA,EAAIC,QAAQC,EAAK,YAeNA,IAGjBH,YAAAA,gBAAO5D,EAAKiE,GACVA,EAAIC,KAAOhC,mBAEWwB,KAAKD,oBAErBU,EAAQT,KAAKjB,gBAAgB,6BAGlB,iCAAY,QACvB2B,EAAUD,EAAME,MACjBD,OAQCE,EAAYZ,mBAAgBhB,GAAQ0B,GAASzB,EAAUe,KAAQf,OAErE3C,EAAI+D,IAAMA,EACV/D,EAAIsE,MAAQA,EACZtE,EAAIuE,MAAQ,IACRC,KDIR,uBACOD,OAAS,EACPb,KAAKY,MAAMZ,KAAKa,QCNJZ,KAAK3D,KAEhB,GAAGA,EAAKiE,QAdZA,EAAIC,KAAKO,KAAKC,UAAU,OACb,mBACC,MACN,mBAAoB"}